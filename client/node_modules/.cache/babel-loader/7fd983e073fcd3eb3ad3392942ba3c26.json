{"ast":null,"code":"import axios from 'axios';\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, LOGIN_SUCCESS, LOGOUT } from './types';\nimport setAuthToken from \"./setToken\";\nexport const register = (nom_prenom, email, password, role) => async dispatch => {\n  try {\n    const res = await axios.post(\"http://localhost:4000/users\", {\n      nom_prenom,\n      email,\n      password,\n      role\n    });\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n    dispatch(getUser());\n  } catch (err) {\n    const error = err.response.data.msg;\n    error && dispatch((error, 'danger'));\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n};\nexport const login = (email, password) => async dispatch => {\n  try {\n    const res = await axios.post(\"http://localhost:8000/chef-d'oeuvre/authentif/login\", {\n      email,\n      password\n    });\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.datalequinze\n    });\n    dispatch(getUser());\n  } catch (err) {\n    const error = err.response.data.msg;\n    error && dispatch(alert(error));\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n};\nexport const getUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get(\"http://localhost:8000/chef-d'oeuvre/authentif/profil\");\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    console.log(err);\n  }\n};\nexport const logout = () => dispatch => {\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"sources":["/home/amira/Bureau/essai-projet-chef/client/src/actions/auth.js"],"names":["axios","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","LOGIN_SUCCESS","LOGOUT","setAuthToken","register","nom_prenom","email","password","role","dispatch","res","post","type","payload","data","getUser","err","error","response","msg","login","datalequinze","alert","LOGIN_FAIL","localStorage","token","get","console","log","logout"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACEC,gBADF,EAEEC,aAFF,EAGEC,WAHF,EAIEC,aAJF,EAKEC,MALF,QAMO,SANP;AAOA,OAAOC,YAAP,MAAyB,YAAzB;AAKA,OAAO,MAAMC,QAAQ,GAAG,CAACC,UAAD,EAAYC,KAAZ,EAAkBC,QAAlB,EAA2BC,IAA3B,KAAoC,MAAMC,QAAN,IAAkB;AAC5E,MAAI;AACF,UAAMC,GAAG,GAAG,MAAMb,KAAK,CAACc,IAAN,CAAW,6BAAX,EAA0C;AAACN,MAAAA,UAAD;AAAYC,MAAAA,KAAZ;AAAkBC,MAAAA,QAAlB;AAA2BC,MAAAA;AAA3B,KAA1C,CAAlB;AACAC,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEd,gBAAR;AAA0Be,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAAvC,KAAD,CAAR;AACAL,IAAAA,QAAQ,CAACM,OAAO,EAAR,CAAR;AAED,GALD,CAKE,OAAOC,GAAP,EAAY;AACZ,UAAMC,KAAK,GAAGD,GAAG,CAACE,QAAJ,CAAaJ,IAAb,CAAkBK,GAAhC;AACAF,IAAAA,KAAK,IAAIR,QAAQ,EAAEQ,KAAK,EAAE,QAAT,EAAjB;AACAR,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEb;AADC,KAAD,CAAR;AAGD;AACF,CAbM;AAcP,OAAO,MAAMqB,KAAK,GAAG,CAACd,KAAD,EAAQC,QAAR,KAAqB,MAAME,QAAN,IAAkB;AAC1D,MAAI;AACF,UAAMC,GAAG,GAAG,MAAMb,KAAK,CAACc,IAAN,CAAW,qDAAX,EAAkE;AAAEL,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAAlE,CAAlB;AACAE,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEX,aADC;AAEPY,MAAAA,OAAO,EAAEH,GAAG,CAACW;AAFN,KAAD,CAAR;AAIAZ,IAAAA,QAAQ,CAACM,OAAO,EAAR,CAAR;AACD,GAPD,CAOE,OAAOC,GAAP,EAAY;AACZ,UAAMC,KAAK,GAAGD,GAAG,CAACE,QAAJ,CAAaJ,IAAb,CAAkBK,GAAhC;AACAF,IAAAA,KAAK,IAAIR,QAAQ,CAACa,KAAK,CAACL,KAAD,CAAN,CAAjB;AACAR,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEW;AADC,KAAD,CAAR;AAGD;AACF,CAfM;AAgBP,OAAO,MAAMR,OAAO,GAAG,MAAM,MAAMN,QAAN,IAAkB;AAC7C,MAAIe,YAAY,CAACC,KAAjB,EAAwB;AACtBtB,IAAAA,YAAY,CAACqB,YAAY,CAACC,KAAd,CAAZ;AACD;;AACD,MAAI;AACF,UAAMf,GAAG,GAAG,MAAMb,KAAK,CAAC6B,GAAN,CAAU,sDAAV,CAAlB;AACAjB,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEZ,WADC;AAEPa,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFN,KAAD,CAAR;AAID,GAND,CAME,OAAOE,GAAP,EAAY;AACZW,IAAAA,OAAO,CAACC,GAAR,CAAYZ,GAAZ;AACD;AACF,CAbM;AAcP,OAAO,MAAMa,MAAM,GAAG,MAAMpB,QAAQ,IAAI;AACtCA,EAAAA,QAAQ,CAAC;AAAEG,IAAAA,IAAI,EAAEV;AAAR,GAAD,CAAR;AACD,CAFM","sourcesContent":["import axios from 'axios';\nimport {\n  REGISTER_SUCCESS,\n  REGISTER_FAIL,\n  USER_LOADED,\n  LOGIN_SUCCESS,\n  LOGOUT\n} from './types';\nimport setAuthToken from \"./setToken\";\n\n\n\n\nexport const register = (nom_prenom,email,password,role) => async dispatch => {\n  try {\n    const res = await axios.post(\"http://localhost:4000/users\", {nom_prenom,email,password,role});\n    dispatch({ type: REGISTER_SUCCESS, payload: res.data});\n    dispatch(getUser());\n\n  } catch (err) {\n    const error = err.response.data.msg;\n    error && dispatch((error, 'danger'));\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n};\nexport const login = (email, password) => async dispatch => {\n  try {\n    const res = await axios.post(\"http://localhost:8000/chef-d'oeuvre/authentif/login\", { email, password });\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.datalequinze\n    });\n    dispatch(getUser());\n  } catch (err) {\n    const error = err.response.data.msg;\n    error && dispatch(alert(error));\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n};\nexport const getUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n  try {\n    const res = await axios.get(\"http://localhost:8000/chef-d'oeuvre/authentif/profil\");\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    console.log(err)\n  }\n};\nexport const logout = () => dispatch => {\n  dispatch({ type: LOGOUT });\n};\n"]},"metadata":{},"sourceType":"module"}